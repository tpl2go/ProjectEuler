/*
 * 12.cpp
 *
 *  Created on: Jul 9, 2016
 *      Author: tpl
 */
# include <vector>
# include <math.h>
# include <iostream>
using namespace std;
#include <stdexcept>
//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

// Generate triangle numbers
// deprecated
long triangle_number(int n) {
	long sum=0;
	for (int i=1; i<(n+1); i++) {
		sum += i;
	}
	return sum;
}

class TriangleNumberStream {
	// generates a stream of triangle numbers
private:
	long tn=0;
	int index=0;
public:
	long next();
};

long TriangleNumberStream::next() {
	index++;
	tn +=index;
	return tn;
}

class PrimeTable {
	// Imagine the primetable object as an infinite table of prime numbers
	// Generate a table of primes lazily
private:
	vector<int> primes;
	bool isPrime(int);
	int nextPrime();
public:
	int get(int);
};

int PrimeTable::get(int n) {
	/**
	 * n: index of prime number
	 * n=0 : 2
	 * n=1 : 3
	 * n=2 : 4
	 */
	if (primes.size()==0) {
		primes.push_back(2);
	}
	if (n<0) {
		throw std::invalid_argument( "received negative value" );
	}
	while ((n+1)>primes.size()) {
		nextPrime();
	}
	return primes.at(n);
}

bool PrimeTable::isPrime(int n){
	for (int i=0; i<primes.size(); i++){
		if (n%primes[i] == 0) {
			return false;
		}
	}
	return true;
}

int PrimeTable::nextPrime() {
	// finding the next prime
	int cur;

	if (primes.back() == 2) {
		cur = primes.back() + 1;
	}
	else {
		cur = primes.back() + 2;
	}

	while (!this->isPrime(cur)) {
		cur+=2;
	}
	primes.push_back(cur);
	return cur;
}

vector<int> exp_list(PrimeTable& ps, long tn) {

	// construct a list of exponents
	vector<int> exp;

	int p = 0; // prime being tested
	long stop = sqrt(tn) + 1;
	int i=-1;

	while (p < stop){
		i++;
		int n = tn;
		int count = 0;
		p = ps.get(i);
		while (n%p==0) {
			count++;
			n = n/p;
		}
		exp.push_back(count);
	}
	return exp;
}

int num_divisors(vector<int> exp) {
	// multiply exponent list
	int num = 1;
	for (int i=0; i<exp.size(); i++){
		if (exp[i]>0) {
			num *= (exp[i]+1);
		}
	}
	return num;
}

long problem12() {
	// fastest way to count number of divisors is to
	// multiply the exponents in the prime factorization

	PrimeTable ps = PrimeTable();
	TriangleNumberStream tns = TriangleNumberStream();
	int num = 0;
	long tn = 0;
	while(num < 501){
		tn = tns.next();
		vector<int> exp = exp_list(ps,tn);
		num = num_divisors(exp);
	}
	return tn;
}
